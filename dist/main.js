(()=>{"use strict";class t{constructor(t){this.data=t,this.left=null,this.right=null}}const e=(t,r="",l=!0)=>{null!==t&&(null!==t.right&&e(t.right,`${r}${l?"│   ":"    "}`,!1),console.log(`${r}${l?"└── ":"┌── "}${t.data}`),null!==t.left&&e(t.left,`${r}${l?"    ":"│   "}`,!0))},r=t=>{const e=[];t.levelOrder((t=>e.push(t.data))),console.log("Level-order:",e.join(", "));const r=[];t.preOrder((t=>r.push(t.data))),console.log("Pre-order:",r.join(", "));const l=[];t.inOrder((t=>l.push(t.data))),console.log("In-order:",l.join(", "));const n=[];t.postOrder((t=>n.push(t.data))),console.log("Post-order:",n.join(", "))},l=generateRandomArray(15),n=new class{constructor(t){this.root=this.buildTree(t)}buildTree(t){return 0===t.length?null:(t=[...new Set(t)].sort(((t,e)=>t-e)),this.buildTreeHelper(t,0,t.length-1))}buildTreeHelper(e,r,l){if(r>l)return null;const n=Math.floor((r+l)/2),o=new t(e[n]);return o.left=this.buildTreeHelper(e,r,n-1),o.right=this.buildTreeHelper(e,n+1,l),o}insert(e){const r=new t(e);if(!this.root)return void(this.root=r);let l=this.root,n=null;for(;l;)if(n=l,e<l.data){if(l=l.left,!l)return void(n.left=r)}else{if(!(e>l.data))return;if(l=l.right,!l)return void(n.right=r)}}deleteItem(t,e){if(null===t)return t;if(e<t.data)t.left=this.deleteItem(t.left,e);else if(e>t.data)t.right=this.deleteItem(t.right,e);else{if(null===t.left)return t.right;if(null===t.right)return t.left;t.data=this.minValue(t.right),t.right=this.deleteItem(t.right,t.data)}return t}minValue(t){let e=t.data;for(;null!==t.left;)e=t.left.data,t=t.left;return e}find(t){let e=this.root;for(;e;)if(t<e.data)e=e.left;else{if(!(t>e.data))return e;e=e.right}return null}levelOrder(t){if("function"!=typeof t)throw new Error("A callback function is required");if(!this.root)return;const e=[this.root];for(;e.length>0;){const r=e.shift();t(r),r.left&&e.push(r.left),r.right&&e.push(r.right)}}inOrder(t){if("function"!=typeof t)throw new Error("A callback function is required");const e=r=>{null!==r&&(e(r.left),t(r),e(r.right))};e(this.root)}preOrder(t){if("function"!=typeof t)throw new Error("A callback function is required");const e=r=>{null!==r&&(t(r),e(r.left),e(r.right))};e(this.root)}postOrder(t){if("function"!=typeof t)throw new Error("A callback function is required");const e=r=>{null!==r&&(e(r.left),e(r.right),t(r))};e(this.root)}height(t){if(null===t)return-1;const e=this.height(t.left),r=this.height(t.right);return Math.max(e,r)+1}depth(t){if(null===t)return-1;let e=this.root,r=0;for(;null!==e;){if(t.data<e.data)e=e.left;else{if(!(t.data>e.data))return r;e=e.right}r++}return-1}isBalanced(){const t=e=>{if(null===e)return 0;const r=t(e.left),l=t(e.right);return-1===r||-1===l||Math.abs(r-l)>1?-1:Math.max(r,l)+1};return-1!==t(this.root)}rebalance(){const t=[],e=r=>{null!==r&&(e(r.left),t.push(r.data),e(r.right))};e(this.root),this.root=this.buildTree(t)}}(l);console.log("Initial tree:"),e(n.root),console.log("Is the tree balanced?",n.isBalanced()),r(n),[101,102,103,104,105].forEach((t=>n.insert(t))),console.log("\nTree after unbalancing:"),e(n.root),console.log("Is the tree balanced?",n.isBalanced()),r(n),n.rebalance(),console.log("\nTree after rebalancing:"),e(n.root),console.log("Is the tree balanced?",n.isBalanced()),r(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,